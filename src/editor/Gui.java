/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor;

import editor.swingComponents.PhotoConvertorJFrame;
import editor.swingComponents.LeftSidePanelJPanel;
import editor.swingComponents.RightPanelImageJPanel;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import net.java.balloontip.BalloonTip;
import net.java.balloontip.styles.ToolTipBalloonStyle;

/**
 *
 * @author Ondřej Mejzlík
 */
public class Gui extends javax.swing.JFrame {

    private static final Color BLACK_OK_LABEL = Color.black;
    private static final Color RED_ERROR_LABEL = Color.red;
    private static final Color WRONG_RED_FIELD = new Color(255, 204, 204);
    private static final Color CORRECT_GREEN_FIELD = new Color(204, 255, 204);
    private final JFileChooser directoryChooser;
    private final JFileChooser imageChooser;
    // Tento textPane obahuje zpravu, ze se soubor nepodarilo nahrat a bude 
    // zobrazen pri chybe spolecne s chybovym oknem.
    private final JTextPane errorTextPane;
    private Gui thisFrame;
    private final String backupFileName;
    private final String dateRegex = "[1-9]\\d{0,1}[.] (Ledna|Února|Března|Dubna|Května|Června|Července|Srpna|Září|Října|Listopadu|Prosince) [1-9]\\d{3}";
    private final String keywordsRegex = "(\\p{L}+[,] )*\\p{L}+";

    private BalloonTip btDescriptionEmpty;
    private BalloonTip btDescriptionUnder150;
    private BalloonTip btDescriptionOver160;
    private BalloonTip btMainTitleEmpty;
    private BalloonTip btMainTitleOver60;
    private BalloonTip btDateWrong;
    private BalloonTip btKeywordsWrong;

    private boolean descriptionOK = false;
    private boolean titleOK = false;
    private boolean dateOK = false;

    private PhotoConvertorJFrame photoConvertor;
    private LeftSidePanelJPanel jPanelLeftSidePanel;
    private String workingDirectory;
    private boolean lockFileList = false;
    // Slouzi k znemozneni pridani obrazku do praveho panelu, pokud neni 
    // nahrany nejaky soubor.
    private TreeMap<String, HTMLFile> loadedFiles;
    private HTMLFile loadedFile = null;

    /**
     * Creates new form Gui
     */
    public Gui() {
        this.directoryChooser = new JFileChooser();
        this.directoryChooser.setDialogTitle("Open white-bear web directory");
        this.directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.imageChooser = new JFileChooser();
        this.imageChooser.setDialogTitle("Add side images.");
        this.imageChooser.setApproveButtonText("Add");
        this.imageChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "bmp"));
        this.imageChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.imageChooser.setMultiSelectionEnabled(true);
        this.backupFileName = System.getProperty("user.home") + "/.whiteBearDir.txt";
        this.loadedFiles = new TreeMap<>();
        this.errorTextPane = new JTextPane();
        this.errorTextPane.setText("Error loading file.");
        this.errorTextPane.setEditable(false);
        this.photoConvertor = new PhotoConvertorJFrame();
        
        this.initComponents();
        this.jScrollPaneRightPanelContainer.setViewportView(this.jPanelRightSidePanel);
        this.initDocumentListeners();
        this.initBalloonTips();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameEditKeywords = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldKeywords = new javax.swing.JTextField();
        jButtonKeywordsOk = new javax.swing.JButton();
        jButtonKeywordsStorno = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jFileListLoaded = new javax.swing.JList<>();
        jScrollPaneEditor = new javax.swing.JScrollPane();
        jTextPaneMainEdior = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDescription = new javax.swing.JTextField();
        jLabelMainTitle = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelStatusBar = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelLoadedFilesCount = new javax.swing.JLabel();
        jScrollPaneLeftPanelContainer = new javax.swing.JScrollPane();
        jToolBar1 = new javax.swing.JToolBar();
        jTextFieldMainTitle = new javax.swing.JTextField();
        jTextFieldDate = new javax.swing.JTextField();
        jScrollPaneRightPanelContainer = new javax.swing.JScrollPane();
        jPanelRightSidePanel = new editor.swingComponents.RightSidePanelJPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNewFile = new javax.swing.JMenuItem();
        jMenuLoad = new javax.swing.JMenuItem();
        jMenuItemReload = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemConvertPhotos = new javax.swing.JMenuItem();
        jMenuItemAddSidePhoto = new javax.swing.JMenuItem();
        jMenuItemEditKeywords = new javax.swing.JMenuItem();

        jFrameEditKeywords.setTitle("Edit keywords");
        jFrameEditKeywords.setAlwaysOnTop(true);
        jFrameEditKeywords.setLocation(new java.awt.Point(200, 200));
        jFrameEditKeywords.setResizable(false);
        jFrameEditKeywords.setSize(new java.awt.Dimension(400, 120));
        jFrameEditKeywords.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jFrameEditKeywordsWindowClosing(evt);
            }
        });

        jLabel2.setText("Keywords:");

        jButtonKeywordsOk.setText("Ok");
        jButtonKeywordsOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKeywordsOkActionPerformed(evt);
            }
        });

        jButtonKeywordsStorno.setText("Storno");
        jButtonKeywordsStorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKeywordsStornoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrameEditKeywordsLayout = new javax.swing.GroupLayout(jFrameEditKeywords.getContentPane());
        jFrameEditKeywords.getContentPane().setLayout(jFrameEditKeywordsLayout);
        jFrameEditKeywordsLayout.setHorizontalGroup(
            jFrameEditKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameEditKeywordsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameEditKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameEditKeywordsLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldKeywords)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameEditKeywordsLayout.createSequentialGroup()
                        .addGap(0, 206, Short.MAX_VALUE)
                        .addComponent(jButtonKeywordsOk, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonKeywordsStorno)))
                .addContainerGap())
        );
        jFrameEditKeywordsLayout.setVerticalGroup(
            jFrameEditKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameEditKeywordsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameEditKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonKeywordsStorno)
                    .addComponent(jButtonKeywordsOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("White Bear web editor");
        setMinimumSize(new java.awt.Dimension(1400, 860));
        setPreferredSize(new java.awt.Dimension(1400, 860));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);

        jFileListLoaded.setBackground(new java.awt.Color(239, 247, 255));
        jFileListLoaded.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jFileListLoaded.setForeground(new java.awt.Color(0, 0, 0));
        jFileListLoaded.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jFileListLoaded.setToolTipText("Loaded files");
        jFileListLoaded.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFileListLoaded.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFileListLoadedMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jFileListLoaded);

        jTextPaneMainEdior.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTextPaneMainEdior.setToolTipText("Edit website content");
        jTextPaneMainEdior.setMinimumSize(new java.awt.Dimension(400, 400));
        jTextPaneMainEdior.setPreferredSize(new java.awt.Dimension(400, 19));
        jScrollPaneEditor.setViewportView(jTextPaneMainEdior);

        jLabel3.setText("Description:");

        jLabelMainTitle.setText("Title:");

        jLabel6.setText("Date:");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelStatusBar.setText("Status bar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStatusBar))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Files loaded:");

        jLabelLoadedFilesCount.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelLoadedFilesCount)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelLoadedFilesCount)))
        );

        jScrollPaneLeftPanelContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jScrollPaneLeftPanelContainer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneLeftPanelContainer.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jTextFieldMainTitle.setColumns(60);

        jTextFieldDate.setColumns(19);

        jScrollPaneRightPanelContainer.setBorder(jScrollPaneLeftPanelContainer.getBorder());
        jScrollPaneRightPanelContainer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneRightPanelContainer.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanelRightSidePanel.setLayout(new java.awt.GridLayout(0, 1, 0, 3));
        jScrollPaneRightPanelContainer.setViewportView(jPanelRightSidePanel);

        jMenuFile.setText("File");
        jMenuFile.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuFileMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        jMenuItemNewFile.setText("New file");
        jMenuItemNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNewFile);

        jMenuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuLoad.setText("Load directory");
        jMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLoadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuLoad);

        jMenuItemReload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemReload.setText("Reload directory");
        jMenuItemReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReloadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemReload);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setText("Save");
        jMenuFile.add(jMenuItemSave);

        jMenuBar2.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenuItemConvertPhotos.setText("Import new photos");
        jMenuItemConvertPhotos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConvertPhotosActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemConvertPhotos);

        jMenuItemAddSidePhoto.setText("Add side photos");
        jMenuItemAddSidePhoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemAddSidePhotoMousePressed(evt);
            }
        });
        jMenuEdit.add(jMenuItemAddSidePhoto);

        jMenuItemEditKeywords.setText("Edit keywords");
        jMenuItemEditKeywords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditKeywordsActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemEditKeywords);

        jMenuBar2.add(jMenuEdit);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneLeftPanelContainer)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabelMainTitle))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldMainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                                    .addComponent(jTextFieldDate)))
                            .addComponent(jScrollPaneEditor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneRightPanelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDescription))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMainTitle)
                            .addComponent(jTextFieldMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneEditor))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPaneLeftPanelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addComponent(jScrollPaneRightPanelContainer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Nastavuje vzhled, prirazeni a text vsem pouzivanym balloon tipum.
     */
    private void initBalloonTips() {
        ToolTipBalloonStyle balloonStyle = new ToolTipBalloonStyle(new Color(255, 253, 217), Color.BLACK);
        this.btDescriptionEmpty = new BalloonTip(this.jTextFieldDescription, new JLabel("Meta description can not be empty"),
                balloonStyle, BalloonTip.Orientation.LEFT_ABOVE, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        // Main title tip se nechce zobrazovat pokud neni jTextField horizontal resizeawble.
        this.btMainTitleEmpty = new BalloonTip(this.jTextFieldMainTitle, new JLabel("Article main <h2> title can not be empty"),
                balloonStyle, BalloonTip.Orientation.LEFT_BELOW, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        this.btMainTitleOver60 = new BalloonTip(this.jTextFieldMainTitle, new JLabel("Title lenght over 60 characters"),
                balloonStyle, BalloonTip.Orientation.LEFT_BELOW, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        this.btDateWrong = new BalloonTip(this.jTextFieldDate, new JLabel("Insert date in this format \"13. Ledna 2016\""),
                balloonStyle, BalloonTip.Orientation.LEFT_BELOW, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        this.btDescriptionUnder150 = new BalloonTip(this.jTextFieldDescription, new JLabel("Meta description length under 150 characters"),
                balloonStyle, BalloonTip.Orientation.LEFT_ABOVE, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        this.btDescriptionOver160 = new BalloonTip(this.jTextFieldDescription, new JLabel("Meta description length over 160 characters"),
                balloonStyle, BalloonTip.Orientation.LEFT_ABOVE, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);
        this.btKeywordsWrong = new BalloonTip(this.jTextFieldKeywords, new JLabel("This field must contain keywords in this format: word, word, ..."),
                balloonStyle, BalloonTip.Orientation.LEFT_ABOVE, BalloonTip.AttachLocation.ALIGNED, 0, 0, false);

        // Bubliny se museji schovat aby nebyly implicitne videt.
        this.btDescriptionEmpty.setVisible(false);
        this.btDescriptionUnder150.setVisible(false);
        this.btDescriptionOver160.setVisible(false);
        this.btMainTitleEmpty.setVisible(false);
        this.btMainTitleOver60.setVisible(false);
        this.btDateWrong.setVisible(false);
        this.btKeywordsWrong.setVisible(false);
    }

    /**
     * Prida posluchace zmeny obsahu k radkum pro zadavani hodnot description,
     * keywords, tite a date.
     */
    private void initDocumentListeners() {
        // Pridava kontrolu spravnosti udaju pro radek description.
        this.jTextFieldDescription.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextFieldDescription.getText().trim();
                if (!(text.isEmpty()) && text.length() < 150) {
                    btDescriptionUnder150.setVisible(true);
                    jTextFieldDescription.setBackground(Gui.WRONG_RED_FIELD);
                    descriptionOK = false;
                } else {
                    btDescriptionUnder150.setVisible(false);
                    jTextFieldDescription.setBackground(Gui.CORRECT_GREEN_FIELD);
                    descriptionOK = true;
                }
                if (text.isEmpty()) {
                    btDescriptionEmpty.setVisible(true);
                    jTextFieldDescription.setBackground(Gui.WRONG_RED_FIELD);
                    descriptionOK = false;
                } else {
                    btDescriptionEmpty.setVisible(false);
                }
                if (text.length() > 159) {
                    btDescriptionOver160.setVisible(true);
                    jTextFieldDescription.setBackground(Gui.WRONG_RED_FIELD);
                    descriptionOK = false;
                } else {
                    btDescriptionOver160.setVisible(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }
        });

        // Pridava kontrolu spravnosti udaju pro radek main title.
        this.jTextFieldMainTitle.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextFieldMainTitle.getText().trim();
                if (text.isEmpty()) {
                    btMainTitleEmpty.setVisible(true);
                    jTextFieldMainTitle.setBackground(Gui.WRONG_RED_FIELD);
                    titleOK = false;
                } else {
                    btMainTitleEmpty.setVisible(false);
                    jTextFieldMainTitle.setBackground(Gui.CORRECT_GREEN_FIELD);
                    titleOK = true;
                }
                if (text.length() > 59) {
                    btMainTitleOver60.setVisible(true);
                    jTextFieldMainTitle.setBackground(Gui.WRONG_RED_FIELD);
                    titleOK = false;
                } else {
                    btMainTitleOver60.setVisible(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }
        });

        // Pridava kontrolu spravnosti udaju pro radek date.
        this.jTextFieldDate.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextFieldDate.getText().trim();
                if (!(text.matches(dateRegex)) && !(text.isEmpty())) {
                    jTextFieldDate.setBackground(Gui.WRONG_RED_FIELD);
                    btDateWrong.setVisible(true);
                    dateOK = false;
                } else {
                    String[] split = text.split("\\.");
                    if (!(text.isEmpty()) && Integer.parseInt(split[0]) <= 31) {
                        jTextFieldDate.setBackground(Gui.CORRECT_GREEN_FIELD);
                        btDateWrong.setVisible(false);
                        dateOK = true;
                    } else {
                        jTextFieldDate.setBackground(Gui.WRONG_RED_FIELD);
                        btDateWrong.setVisible(true);
                        dateOK = false;
                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }
        });

        // Pridava kontrolu spravnosti udaju pro radek keywords.
        // Pokudje udaj spatne, deaktivuje tlacitko OK.
        this.jTextFieldKeywords.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextFieldKeywords.getText().trim();
                if (text.matches(keywordsRegex)) {
                    jTextFieldKeywords.setBackground(Gui.CORRECT_GREEN_FIELD);
                    btKeywordsWrong.setVisible(false);
                    jButtonKeywordsOk.setEnabled(true);
                } else {
                    jTextFieldKeywords.setBackground(Gui.WRONG_RED_FIELD);
                    btKeywordsWrong.setVisible(true);
                    jButtonKeywordsOk.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                this.insertUpdate(e);
            }
        });
    }

    /**
     * Nacte do editoru posledni znamy adresar s webem white-bear.
     */
    public void loadLastDirectory() {
        // Automaticky zavre reader po skonceni try bloku.
        try (BufferedReader reader = new BufferedReader(new FileReader(this.backupFileName))) {
            String line = reader.readLine();
            if (line.equals("white bear working directory:")) {
                line = reader.readLine();
                if (line.startsWith("/")) {
                    this.workingDirectory = line;
                    this.loadDirectoryIntoEditor(new File(this.workingDirectory));
                    // Nacteni souboru nevyjde, protoze seznam souboru jeste neni pripraven.
                    //line = reader.readLine();
                    //this.loadDocumentIntoEditor(line);   
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Can not read .whiteBearDir.txt in home directory. This is normal when first run.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * Reaguje na zmacknuti tlacitka Load directory.
     *
     * @param evt event predany od tlacitka neni vyuzity.
     */
    private void jMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLoadActionPerformed
        int chooserValue = this.directoryChooser.showOpenDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            File directory = directoryChooser.getSelectedFile();
            this.workingDirectory = directory.getAbsolutePath();
            this.loadDirectoryIntoEditor(directory);
        }
    }//GEN-LAST:event_jMenuLoadActionPerformed

    /**
     * Nacte zvoleny adresar do seznamu souboru v okne. Spousti directory
     * parser, ktery vybere jenom soubory, ktere obsahuji clanky webu. Uloha se
     * spousti v samostatnem vlakne na pozadi. Pokud dojde k chybe, vyhodi
     * tabulku. Jinak po skonceni parsovani naplni promennou loaded files a
     * nahrane soubory vypise do gui do leveho okna volby souboru.
     *
     * @param directory Adresar ktery se bude zpracovavat.
     */
    private void loadDirectoryIntoEditor(File directory) {
        //Zalozit anonymni tridu swing workeru, ta bude mit v metode done
        //pristup k private promennym tridy Gui.
        SwingWorker<TreeMap<String, HTMLFile>, Void> worker = new SwingWorker<TreeMap<String, HTMLFile>, Void>() {
            @Override
            protected TreeMap<String, HTMLFile> doInBackground() throws IOException {
                DirectoryParser parser = DirectoryParser.getParser();
                parser.parseDirectory(directory);
                return parser.getParsedFiles();
            }

            @Override
            protected void done() {
                try {
                    // Get metoda vrati to, co doInBackground vratil.
                    loadedFiles = get();
                } catch (InterruptedException | ExecutionException ex) {
                    String cause = ex.getCause().getMessage();
                    JOptionPane.showMessageDialog(null, "Could not load directory. Thread operation to load direcotory failed. " + cause, "Error", JOptionPane.WARNING_MESSAGE);
                }
                if (loadedFiles.isEmpty()) {
                    jFileListLoaded.setListData(new String[0]);
                    JOptionPane.showMessageDialog(null, "Not a white-bear website directory", "Error", JOptionPane.WARNING_MESSAGE);
                } else {
                    String[] fileNames = new String[loadedFiles.size()];
                    fileNames = loadedFiles.keySet().toArray(fileNames );
                    jFileListLoaded.setListData(fileNames);
                    jLabelLoadedFilesCount.setText(String.valueOf(fileNames.length));
                }
            }
        };
        worker.execute();
    }

    /**
     * Reaguje na kliknuti mysi na polozku seznamu souboru.
     *
     * @param evt event predany od tlacitka.
     */
    private void jFileListLoadedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFileListLoadedMouseClicked
        if (!(this.lockFileList)) {
            // Uzamceni file listu, protoze dve rychla kliknuti zpusobuji problem pri nacitani.
            // Zamek znemoznuje nacist soubor v metode jFileListLoadedMouseClicked.
            // Zamek se nastavi na false po nacteni souboru v metode done metody loadDocumentIntoEditor.
            this.lockFileList = true;
            // Toto samo o sobe nestaci list stejne reaguje na kliknuti mysi.
            this.jFileListLoaded.setEnabled(false);
            String fileName = jFileListLoaded.getSelectedValue();
            this.loadDocumentIntoEditor(fileName);
        }
    }//GEN-LAST:event_jFileListLoadedMouseClicked

    /**
     * Znovu nahraje soubory z pracovniho adresare.
     *
     * @param evt Nepouzity event.
     */
    private void jMenuItemReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReloadActionPerformed
        this.loadDirectoryIntoEditor(new File(this.workingDirectory));
    }//GEN-LAST:event_jMenuItemReloadActionPerformed

    /**
     * Zobrazi okno pro prohlizeni a upravu meta keywords. Keywords se prilis ve
     * vyhledavani nepouzivaji, proto nejsou soucasti hlavniho okna.
     *
     * @param evt Nepouzity event.
     */
    private void jMenuItemEditKeywordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditKeywordsActionPerformed
        this.jFrameEditKeywords.setVisible(true);
        // Deaktivovani hlavniho okna editoru. Znovu se aktivuje po zavreni 
        // editacniho okna keywords.
        this.thisFrame.setEnabled(false);
    }//GEN-LAST:event_jMenuItemEditKeywordsActionPerformed

    /**
     * Prida postranni obrazek do praveho panelu.
     *
     * @param evt Nepouzity event.
     */
    private void jMenuItemAddSidePhotoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemAddSidePhotoMousePressed
        int chooserValue = this.imageChooser.showOpenDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = this.imageChooser.getSelectedFiles();
            for (File file : selectedFiles) {
                this.jPanelRightSidePanel.addImage(new RightPanelImageJPanel(this.thisFrame, jPanelRightSidePanel,
                        file.getAbsolutePath(), "Empty alt", "Empty figcaption", this.workingDirectory));
            }
        }
    }//GEN-LAST:event_jMenuItemAddSidePhotoMousePressed

    /**
     * Obsluhuje kliknuti na OK v okne editace keywords. Vola metodu
     * acceptKeywords.
     *
     * @param evt Nepouzity event.
     */
    private void jButtonKeywordsOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKeywordsOkActionPerformed
        this.acceptKeywords();
    }//GEN-LAST:event_jButtonKeywordsOkActionPerformed

    /**
     * Obsluhuje kliknuti na Storno v okne editace keywords. Vola metodu
     * discardKeywords.
     *
     * @param evt Nepouzity event.
     */
    private void jButtonKeywordsStornoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKeywordsStornoActionPerformed
        this.discardKeywords();
    }//GEN-LAST:event_jButtonKeywordsStornoActionPerformed

    /**
     * Obsluhuje kliknuti na krizek v okne editace keywords. Vola metodu
     * discardKeywords. Zavreni krizkem povazujeme za storno. Nova metoda se
     * vola proto, ze nemuzeme volat jButtonKeywordsStornoActionPerformed,
     * protoze ji nemuzeme predat WindowEvent, protoze chce ActionEvent.
     *
     * @param evt Nepouzity event.
     */
    private void jFrameEditKeywordsWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jFrameEditKeywordsWindowClosing
        this.discardKeywords();
    }//GEN-LAST:event_jFrameEditKeywordsWindowClosing

    /**
     * Reaguje na kliknuti na File. Zkontroluje jestli je nejaky udaj spatne
     * zadany (nejake pole je cervene), pokud neni, povoli soubor ulozit. Nejaky
     * soubor musi byt v editoru otevreny.
     *
     * @param evt Nepouzity event.
     */
    private void jMenuFileMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuFileMenuSelected
        // Kontrola je nutna, protoze uzivatel muze vybrat menu i kdyz jsou
        // panely prazdne po startu programu.
        if (this.loadedFile != null) {
            boolean leftPanelOK = this.jPanelLeftSidePanel.areValuesOk();
            boolean rightPanelOK = this.jPanelRightSidePanel.areAllImagesOK();
            boolean result = this.dateOK && this.descriptionOK && this.titleOK && leftPanelOK && rightPanelOK;
            if (result) {
                this.jMenuItemSave.setEnabled(true);
            } else {
                this.jMenuItemSave.setEnabled(false);
            }
        } else {
            this.jMenuItemSave.setEnabled(false);
        }
    }//GEN-LAST:event_jMenuFileMenuSelected

    /**
     * Prida nove fotky/obrazky do adresaru webu. Zkopiruje vybrane soubory
     * do slozky images/original a vytvori thumbnaily ve slozce 
     * images/thumbnails. Vybrane soubory musi mit pomer stran 4/3.
     * V pripade, ze nejaky soubor nevyhovuje, vyhodi hlasku, ktery soubor 
     * je vadny.
     * 
     * @param evt Nepouzity event
     */
    private void jMenuItemConvertPhotosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConvertPhotosActionPerformed
        this.photoConvertor.setVisible(true);
    }//GEN-LAST:event_jMenuItemConvertPhotosActionPerformed

    private void jMenuItemNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemNewFileActionPerformed

    /**
     * Ulozi keywords do otevreneho HTMLFile a aktivuje hlavni okno editoru pri
     * zavreni okna zmeny keywords.
     */
    private void acceptKeywords() {
        // Spravnost keywords se hlida pri vpisovani do radku. 
        this.loadedFile.setKeywords(this.jTextFieldKeywords.getText());
        this.jFrameEditKeywords.setVisible(false);
        this.thisFrame.setEnabled(true);
    }

    /**
     * Ignoruje zmenene keywords, vrati puvodni a aktivuje hlavni okno editoru
     * pri zavreni okna zmeny keywords.
     */
    private void discardKeywords() {
        this.jTextFieldKeywords.setText(this.loadedFile.getKeywords());
        this.jFrameEditKeywords.setVisible(false);
        this.thisFrame.setEnabled(true);
    }

    /**
     * Dany soubor nahraje do okna editoru. Metoda zapise pracovni adresar
     * spolecne s vybranym souborem na disk pro rychle otevreni pri pristim
     * zapnuti programu.
     *
     * @param fileName Jmeno souboru k nahrani.
     */
    private void loadDocumentIntoEditor(String fileName) {
        SwingWorker<HTMLFile, Void> worker = new SwingWorker<HTMLFile, Void>() {
            // Vyjimky se uvnitr doInBackground neresi, ale propousteji se dal. Lze je ziskat v metode done a osetrit tam. 
            @Override
            protected HTMLFile doInBackground() throws IOException, BadLocationException, ConversionException {
                // Tyto promenne je nutne inicializovat na null aby byly
                // Viditelne za try blokem pote je nutne testovat na null.
                HTMLFile file = null;
                PrepareDocument preparer = PrepareDocument.getInstance();
                if (!(fileName == null)) {
                    if (loadedFiles.containsKey(fileName)) {
                        file = loadedFiles.get(fileName);
                        // Zapis otevreny adresar a soubor na disk aby se dal otevrit 
                        // pri dalsim spusteni automaticky.
                        String backup = "white bear working directory:\n" + workingDirectory + "\n" + fileName;
                        // Automaticky zavre writer po skonceni
                        try (FileWriter writer = new FileWriter(new File(backupFileName))) {
                            writer.write(backup);
                            writer.flush();
                        }
                    }
                }
                if (file == null) {
                    throw new ConversionException("Can not read file.");
                }
                return preparer.ProcessFile(file, workingDirectory, thisFrame);
            }

            /**
             *
             */
            @Override
            protected void done() {
                try {
                    // Bubliny se neschovaji automaticky se zanikem panelu.
                    if (jPanelLeftSidePanel != null) {
                        jPanelLeftSidePanel.hideBalloonTips();
                    }
                    // Ziskani noveho zpracovaneho souboru.
                    loadedFile = null;
                    HTMLFile processedFile = get();
                    loadedFile = processedFile;
                    jTextPaneMainEdior = processedFile.getTextPane();
                    jPanelRightSidePanel = processedFile.getRightPanel();
                    jPanelLeftSidePanel = processedFile.getLeftPanel();
                    // setViewPort vlozi do scrollpane jinou komponentu a ta se
                    // zobrazi v jeho mezich automaticky. Pouzivame scrollpane
                    // protoze je schopny pohodlne vymenit komponentu uvnitr.
                    jScrollPaneEditor.setViewportView(jTextPaneMainEdior);
                    jScrollPaneLeftPanelContainer.setViewportView(jPanelLeftSidePanel);
                    jScrollPaneRightPanelContainer.setViewportView(jPanelRightSidePanel);
                    jTextFieldDescription.setText(processedFile.getDescription());
                    jTextFieldKeywords.setText(processedFile.getKeywords());
                    jTextFieldMainTitle.setText(processedFile.getMainHeading());
                    jTextFieldDate.setText(processedFile.getDate());
                    // Opetovne aktivovani file listu po nacteni souboru
                    jLabelStatusBar.setForeground(Gui.BLACK_OK_LABEL);
                    jLabelStatusBar.setText("Loading file success");
                    allowEditing();
                } catch (ExecutionException | InterruptedException ex) {
                    // ExecutionException obsahuje vyjimku, ktera vznikla uvnitr metody doInBackground.
                    String cause = ex.getCause().getMessage();
                    displayErrorState();
                    JOptionPane.showMessageDialog(null, "Loading file failed. " + cause, "Error", JOptionPane.WARNING_MESSAGE);

                }
            }
        };
        worker.execute();
    }

    /**
     * Zabrani interakci se vsemi castmi editoru krome nahrani noveho adresare,
     * vytvoreni noveho souboru nebo nahrani noveho souboru.
     */
    private void preventEditing() {
        // Necha odemceny file list nahranych souboru.
        lockFileList = false;
        jFileListLoaded.setEnabled(true);
        // Zrusi jakykoli predchozi nahrany soubor.
        loadedFile = null;
        // Vypne vsechna pole, ktere lze menit a tlacitka.
        this.jMenuItemAddSidePhoto.setEnabled(false);
        this.jMenuItemEditKeywords.setEnabled(false);
        this.jMenuItemSave.setEnabled(false);
        this.jTextFieldDate.setEditable(false);
        this.jTextFieldDescription.setEditable(false);
        this.jTextFieldMainTitle.setEditable(false);
        this.jTextPaneMainEdior.setEditable(false);
        // Levy a pravy panel se nemusi deaktivovat, protoze v okamziku
        // chyby a startu programu, kdy se tato metoda vola jsou nastaveny na
        // null a nic neobsahuji.
    }

    /**
     * Povoli interakci se vsemi castmi editoru.
     */
    private void allowEditing() {
        // Odemce file list nahranych souboru.
        lockFileList = false;
        jFileListLoaded.setEnabled(true);
        // Zapne vsechna pole, ktere lze menit a tlacitka.
        this.jMenuItemAddSidePhoto.setEnabled(true);
        this.jMenuItemEditKeywords.setEnabled(true);
        this.jMenuItemSave.setEnabled(true);
        this.jTextFieldDate.setEditable(true);
        this.jTextFieldDescription.setEditable(true);
        this.jTextFieldMainTitle.setEditable(true);
        this.jTextPaneMainEdior.setEditable(true);
    }

    /**
     * Vynuluje vsechny komponenty okna editoru na defaultni obsah a naplni
     * textove pole hlaskou, ze doslo k chybe. Znemozni pomoci metody
     * preventEditing interakci se vsim krome seznamu souboru, aby uzovatel mohl
     * nahrat novy soubor.
     */
    private void displayErrorState() {
        preventEditing();
        jScrollPaneEditor.setViewportView(this.errorTextPane);
        jScrollPaneLeftPanelContainer.setViewportView(null);
        jScrollPaneRightPanelContainer.setViewportView(null);
        this.jLabelStatusBar.setForeground(Gui.RED_ERROR_LABEL);
        this.jLabelStatusBar.setText("Error loading file");
        this.jTextFieldDate.setText("");
        this.jTextFieldDescription.setText("");
        this.jTextFieldKeywords.setText("");
        this.jTextFieldMainTitle.setText("");
    }

    private void saveThisInstance() {
        // Tato metoda se spousti jako prvni po startu programu a dokonceni
        // Konstruktoru, proto je nyni mozne ulozit odkaz na tuto instanci do 
        // promenne. Ten je potreba v metode done pro predani PrepareDocument.
        // Metoda done ale nemuze pouzit this.
        this.thisFrame = this;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Gui gui = new Gui();
                gui.saveThisInstance();
                gui.preventEditing();
                gui.setLocation(380, 150);
                gui.loadLastDirectory();
                gui.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonKeywordsOk;
    private javax.swing.JButton jButtonKeywordsStorno;
    private javax.swing.JList<String> jFileListLoaded;
    private javax.swing.JFrame jFrameEditKeywords;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelLoadedFilesCount;
    private javax.swing.JLabel jLabelMainTitle;
    private javax.swing.JLabel jLabelStatusBar;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAddSidePhoto;
    private javax.swing.JMenuItem jMenuItemConvertPhotos;
    private javax.swing.JMenuItem jMenuItemEditKeywords;
    private javax.swing.JMenuItem jMenuItemNewFile;
    private javax.swing.JMenuItem jMenuItemReload;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuLoad;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private editor.swingComponents.RightSidePanelJPanel jPanelRightSidePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneEditor;
    private javax.swing.JScrollPane jScrollPaneLeftPanelContainer;
    private javax.swing.JScrollPane jScrollPaneRightPanelContainer;
    private javax.swing.JTextField jTextFieldDate;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldKeywords;
    private javax.swing.JTextField jTextFieldMainTitle;
    private javax.swing.JTextPane jTextPaneMainEdior;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
